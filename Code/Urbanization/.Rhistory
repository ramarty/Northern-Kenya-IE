# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
random_points <- random_points[order(runif(nrow(random_points))),]
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8)
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi")
#### Train and Test Sets
train <- sample(nrow(random_points), 0.1*nrow(random_points), replace = FALSE)
TrainSet <- random_points[train,]
nrow(TrainSet)
head(random_points)
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
random_points <- random_points[order(runif(nrow(random_points))),]
head(random_points)
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8)
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi")
#### Train and Test Sets
train <- sample(nrow(random_points), 0.1*nrow(random_points), replace = FALSE)
TrainSet <- random_points[train,]
ValidSet <- random_points[-train,]
nrow(TrainSet)
#### Train and Test Sets
train <- sample(nrow(random_points), 0.05*nrow(random_points), replace = FALSE)
TrainSet <- random_points[train,]
ValidSet <- random_points[-train,]
nrow(TrainSet)
#### Train and Test Sets
train <- sample(nrow(random_points), 0.01*nrow(random_points), replace = FALSE)
ValidSet <- random_points[-train,]
TrainSet <- random_points[train,]
nrow(TrainSet)
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet[1:10000,], ntree = 20, mtry = 6, importance = FALSE)
nrow(TrainSet[1:10000,])
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet[1:20000,], ntree = 20, mtry = 6, importance = FALSE)
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet[1:50000,], ntree = 20, mtry = 6, importance = FALSE)
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet, ntree = 20, mtry = 6, importance = FALSE)
# Analysis ---------------------------------------------------------------------
#### Train Set
predTrain <- predict(rf_model1, TrainSet, type = "class")
table(predTrain, TrainSet$built_up)
#### Validation Set
predValid <- predict(rf_model1, ValidSet, type = "class")
table(predValid, ValidSet$built_up)
sum(ValidSet$built_up == TRUE) # Number of built up pixels (truth)
sum(predValid == TRUE & ValidSet$built_up == TRUE) # Accurately predicted urban
sum(predValid == TRUE & ValidSet$built_up == FALSE) # False positive
sum(predValid == TRUE & ValidSet$built_up == TRUE) / sum(ValidSet$built_up == TRUE)
sum(predValid == TRUE & ValidSet$built_up == FALSE) / sum(ValidSet$built_up == TRUE)
sum(ValidSet$built_up == TRUE)
sum(ValidSet$built_up == FALSE)
sum(predValid == TRUE)
is.na(predValid) %>% table
head(training_variables)
head(random_points)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi")
training_variables
random_points$built_up
table(random_points$built_up)
random_points$built_up <- factor(random_points$built_up, labels = c("nbu", "bu"))
table(random_points$built_up)
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
random_points <- random_points[order(runif(nrow(random_points))),]
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8)
random_points$built_up <- factor(random_points$built_up, labels = c("non-built-up", "built-up"))
table(random_points$built_up)
# Load and Prep Data -----------------------------------------------------------
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) %>% factor(labels = c("non-built-up", "built-up"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) %>% factor(labels = c("non-built-up", "built-up"))
table(random_points$built_up)
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA
names(random_points)[grepl("viirs_rad_"), names(random_points)]
names(random_points)[grepl(("viirs_rad_"), names(random_points))]
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% lapply(median)
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% apply(df,1,median)
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% apply(1,median)
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% apply(2,median)
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% apply(1,median)
random_points$viirs_rad_median <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% apply(1,median)
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% colMeans # apply(1,median)
random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% rowMeans # apply(1,median)
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% head %>% rowMeans(na.rm=T) # apply(1,median)
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
random_points$viirs_rad_max <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMax(na.rm=T) # apply(1,median)
random_points$viirs_rad_max <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMaxs(na.rm=T) # apply(1,median)
library(matrixStats )
random_points$viirs_rad_max <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMaxs(na.rm=T) # apply(1,median)
head(random_points)
View(random_points)
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
random_points <- random_points[!random_points$na_in_train_var,]
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
#### Load Data
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) %>% factor(labels = c("non-built-up", "built-up"))
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Nighttime Lights
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA # if no cloud free days, set radiance as 0.
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi","viirs_rad_mean")
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
table(random_points$na_in_train_var)
random_points <- random_points[!random_points$na_in_train_var,]
table(random_points$na_in_train_var)
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
#### Load Data
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) # %>% factor(labels = c("non-built-up", "built-up"))
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Nighttime Lights
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA # if no cloud free days, set radiance as 0.
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi","viirs_rad_mean")
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
random_points <- random_points[!random_points$na_in_train_var,]
random_points$train <- sample(nrow(random_points), 0.01*nrow(random_points), replace = FALSE)
random_points$train[random_points$built_up] <- sample(length(random_points$train[random_points$built_up]),
0.10*length(random_points$train[random_points$built_up]),
replace=FALSE)
length(random_points$train[random_points$built_up])
table(random_points$built_up)
# Train and Test Sets ----------------------------------------------------------
random_points$train <- sample(nrow(random_points), 0.01*nrow(random_points), replace = FALSE)
# Train and Test Sets ----------------------------------------------------------
random_points$train <- sample(nrow(random_points), 0.01*nrow(random_points), replace = FALSE)
nrow(random_points)
nrow(random_points)
0.01*nrow(random_points)
help(sample)
sample(c(0,1), prop=c(.2,.8), replace=TRUE, size=100)
sample(x=c(0,1), prop=c(.2,.8), replace=TRUE, size=100)
sample(x=c(0,1),  prob=c(.2,.8), replace=TRUE, size=100)
sample(x=c(0,1),  prob=c(.2,.8), size=100, replace=TRUE)
sample(x=c(0,1), prob=c(.2,.8), size=100, replace=TRUE) == 1
sample(x=c(FALSE,TRUE), prob=c(.2,.8), size=100, replace=TRUE)
# Train and Test Sets ----------------------------------------------------------
random_points$train <- sample(x=c(FALSE,TRUE), prob=c(.99,.01), size=nrow(random_points), replace=TRUE)
table(random_points$train)
length(random_points$train[random_points$built_up])
length(random_points$train[random_points$built_up])
nrow(random_points)
table(random_points$built_up)
length(random_points$train[random_points$built_up==T])
length(random_points$train[random_points$built_up])
# Train and Test Sets ----------------------------------------------------------
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
# Train and Test Sets ----------------------------------------------------------
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.2,.8),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
table(random_points$train)
random_points$train_urban[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.2,.8),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
table(random_points$train_urban)
# Train and Test Sets ----------------------------------------------------------
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.2,.8),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
#### Load Data
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) # %>% factor(labels = c("non-built-up", "built-up"))
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Nighttime Lights
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA # if no cloud free days, set radiance as 0.
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi","viirs_rad_mean")
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
random_points <- random_points[!random_points$na_in_train_var,]
# Train and Test Sets ----------------------------------------------------------
#### Generate train variable
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.2,.8),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
#### Separate into train and validation sets
TrainSet <- random_points[train,]
ValidSet <- random_points[-train,]
#### Separate into train and validation sets
TrainSet <- random_points[random_points$train==T,]
ValidSet <- random_points[random_points$train==F,]
TrainSet$built_up %>% table
ValidSet$built_up %>% table
#### Generate train variable
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.8,.2),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
#### Separate into train and validation sets
TrainSet <- random_points[random_points$train==T,]
ValidSet <- random_points[random_points$train==F,]
table
TrainSet$built_up %>% table
ValidSet$built_up %>% table
nrow(TrainSet)
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet, ntree = 20, mtry = 6, importance = FALSE)
# Analysis ---------------------------------------------------------------------
#### Train Set
predTrain <- predict(rf_model1, TrainSet, type = "class")
table(predTrain, TrainSet$built_up)
#### Validation Set
predValid <- predict(rf_model1, ValidSet, type = "class")
table(predValid, ValidSet$built_up)
sum(ValidSet$built_up == TRUE) # Number of built up pixels (truth)
sum(predValid == TRUE & ValidSet$built_up == TRUE) # Accurately predicted urban
sum(predValid == TRUE & ValidSet$built_up == FALSE) # False positive
sum(predValid == TRUE & ValidSet$built_up == TRUE) / sum(ValidSet$built_up == TRUE)
sum(predValid == TRUE & ValidSet$built_up == FALSE) / sum(ValidSet$built_up == TRUE)
#### Variable Importance
importance(rf_model1)
varImpPlot(rf_model1)
#### Standardize Variables
dat <- data.frame(x = rnorm(10, 30, .2), y = runif(10, 3, 5))
scaled.dat <- scale(dat)
# check that we get mean of 0 and sd of 1
colMeans(scaled.dat)
apply(scaled.dat, 2, sd)
dat
#### Standardize Variables
random_points$band_1 <- scale(random_points$band_1)
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
#### Load Data
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) # %>% factor(labels = c("non-built-up", "built-up"))
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Nighttime Lights
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA # if no cloud free days, set radiance as 0.
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi","viirs_rad_mean")
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
random_points <- random_points[!random_points$na_in_train_var,]
#### Standardize Variables
for(var in training_variables) random_points[[var]] <- scale(random_points[[var]])
# Train and Test Sets ----------------------------------------------------------
#### Generate train variable
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.8,.2),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
#### Separate into train and validation sets
TrainSet <- random_points[random_points$train==T,]
ValidSet <- random_points[random_points$train==F,]
TrainSet$built_up %>% table
ValidSet$built_up %>% table
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet, ntree = 20, mtry = 6, importance = FALSE)
# Analysis ---------------------------------------------------------------------
#### Train Set
predTrain <- predict(rf_model1, TrainSet, type = "class")
table(predTrain, TrainSet$built_up)
#### Validation Set
predValid <- predict(rf_model1, ValidSet, type = "class")
table(predValid, ValidSet$built_up)
sum(ValidSet$built_up == TRUE) # Number of built up pixels (truth)
sum(predValid == TRUE & ValidSet$built_up == TRUE) # Accurately predicted urban
sum(predValid == TRUE & ValidSet$built_up == FALSE) # False positive
sum(predValid == TRUE & ValidSet$built_up == TRUE) / sum(ValidSet$built_up == TRUE)
sum(predValid == TRUE & ValidSet$built_up == FALSE) / sum(ValidSet$built_up == TRUE)
#### Variable Importance
importance(rf_model1)
varImpPlot(rf_model1)
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
#### Load Data
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) # %>% factor(labels = c("non-built-up", "built-up"))
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
#### Nighttime Lights
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA # if no cloud free days, set radiance as 0.
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:12),"ndvi")
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
random_points <- random_points[!random_points$na_in_train_var,]
#### Standardize Variables
for(var in training_variables) random_points[[var]] <- scale(random_points[[var]])
# Train and Test Sets ----------------------------------------------------------
#### Generate train variable
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.99,.01),
size=nrow(random_points),
replace=TRUE)
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.8,.2),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
#### Separate into train and validation sets
TrainSet <- random_points[random_points$train==T,]
ValidSet <- random_points[random_points$train==F,]
TrainSet$built_up %>% table
ValidSet$built_up %>% table
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet, ntree = 20, mtry = 6, importance = FALSE)
# Analysis ---------------------------------------------------------------------
#### Train Set
predTrain <- predict(rf_model1, TrainSet, type = "class")
table(predTrain, TrainSet$built_up)
#### Validation Set
predValid <- predict(rf_model1, ValidSet, type = "class")
table(predValid, ValidSet$built_up)
sum(ValidSet$built_up == TRUE) # Number of built up pixels (truth)
sum(predValid == TRUE & ValidSet$built_up == TRUE) # Accurately predicted urban
sum(predValid == TRUE & ValidSet$built_up == FALSE) # False positive
sum(predValid == TRUE & ValidSet$built_up == TRUE) / sum(ValidSet$built_up == TRUE)
sum(predValid == TRUE & ValidSet$built_up == FALSE) / sum(ValidSet$built_up == TRUE)
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet, ntree = 20, mtry = 10, importance = FALSE)
# Analysis ---------------------------------------------------------------------
#### Train Set
predTrain <- predict(rf_model1, TrainSet, type = "class")
table(predTrain, TrainSet$built_up)
#### Validation Set
predValid <- predict(rf_model1, ValidSet, type = "class")
table(predValid, ValidSet$built_up)
sum(ValidSet$built_up == TRUE) # Number of built up pixels (truth)
sum(predValid == TRUE & ValidSet$built_up == TRUE) # Accurately predicted urban
sum(predValid == TRUE & ValidSet$built_up == FALSE) # False positive
sum(predValid == TRUE & ValidSet$built_up == TRUE) / sum(ValidSet$built_up == TRUE)
sum(predValid == TRUE & ValidSet$built_up == FALSE) / sum(ValidSet$built_up == TRUE)
#### Variable Importance
importance(rf_model1)
varImpPlot(rf_model1)
# Train and Test Sets ----------------------------------------------------------
#### Generate train variable
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.98,.02),
size=nrow(random_points),
replace=TRUE)
if(F){
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.8,.2),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
}
table(random_points$train)
#### Separate into train and validation sets
TrainSet <- random_points[random_points$train==T,]
ValidSet <- random_points[random_points$train==F,]
TrainSet$built_up %>% table
# Train and Test Sets ----------------------------------------------------------
#### Generate train variable
random_points$train <- sample(x=c(FALSE,TRUE),
prob=c(.95,.05),
size=nrow(random_points),
replace=TRUE)
if(F){
random_points$train[random_points$built_up==T] <- sample(x=c(FALSE,TRUE),
prob=c(.8,.2),
size=length(random_points$train[random_points$built_up==T]),
replace=TRUE)
}
#### Separate into train and validation sets
TrainSet <- random_points[random_points$train==T,]
ValidSet <- random_points[random_points$train==F,]
TrainSet$built_up %>% table
ValidSet$built_up %>% table
# Implement RF Model -----------------------------------------------------------
rf_model1 <- randomForest(as.formula(paste0("built_up ~ ", paste(training_variables, collapse=" + "))),
data = TrainSet, ntree = 20, mtry = 10, importance = FALSE)
# Analysis ---------------------------------------------------------------------
#### Train Set
predTrain <- predict(rf_model1, TrainSet, type = "class")
table(predTrain, TrainSet$built_up)
#### Validation Set
predValid <- predict(rf_model1, ValidSet, type = "class")
table(predValid, ValidSet$built_up)
sum(ValidSet$built_up == TRUE) # Number of built up pixels (truth)
sum(predValid == TRUE & ValidSet$built_up == TRUE) # Accurately predicted urban
sum(predValid == TRUE & ValidSet$built_up == FALSE) # False positive
sum(predValid == TRUE & ValidSet$built_up == TRUE) / sum(ValidSet$built_up == TRUE)
sum(predValid == TRUE & ValidSet$built_up == FALSE) / sum(ValidSet$built_up == TRUE)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:11),"ndvi","ndwi","ndbi","evi","ui")
# Northern Kenya IE
# Setup ------------------------------------------------------------------------
if(Sys.info()["user"] == "WB521633") source("C:/Users/wb521633/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
if(Sys.info()["user"] == "robmarty") source("~/Dropbox/World Bank/IEs/Northern Kenya IE/Code/northern_kenya_ie_master.R")
library(randomForest)
set.seed(42)
# Load and Prep Data -----------------------------------------------------------
#### Load Data
load(file.path(intermediate_data_file_path, "Africover Random Points with Landsat", "random_points_landsat.Rda"))
#### Create Variables
random_points$built_up <- as.factor(random_points$africover_kenya == 8) # %>% factor(labels = c("non-built-up", "built-up"))
random_points$ndvi <- (random_points$band_5 - random_points$band_4) / (random_points$band_5 + random_points$band_4)
random_points$ndwi <- (random_points$band_3 - random_points$band_5) / (random_points$band_3 + random_points$band_5)
random_points$ndbi <- (random_points$band_6 - random_points$band_5) / (random_points$band_6 + random_points$band_5)
random_points$evi <- 2.5 * ((random_points$band_5/random_points$band_4)/(random_points$band_5 +6*random_points$band_4 - 7.5*random_points$band_2 +1))
random_points$ui <- (random_points$band_7 - random_points$band_5) / (random_points$band_7 + random_points$band_5)
#### Nighttime Lights
for(i in 1:12) random_points[[paste0("viirs_rad_",i)]][random_points[[paste0("viirs_cf_cvg_",i)]] %in% 0] <- NA # if no cloud free days, set radiance as 0.
random_points$viirs_rad_mean <- random_points[,names(random_points)[grepl(("viirs_rad_"), names(random_points))]] %>% rowMeans(na.rm=T) # apply(1,median)
#### Limit variables to only those used in model
training_variables <- c(paste0("band_",1:11),"ndvi","ndwi","ndbi","evi","ui")
random_points$na_in_train_var <- random_points[,training_variables] %>% rowMeans %>% is.na
random_points <- random_points[!random_points$na_in_train_var,]
#### Standardize Variables
#for(var in training_variables) random_points[[var]] <- scale(random_points[[var]])
